# =============================================================================
# NGINX CONFIGURATION WITH SSL TERMINATION
# =============================================================================
# This configuration handles SSL/TLS termination directly on nginx
# Use this for self-hosted SSL instead of Cloudflare tunnel
# Uses standard nginx (no Lua/OpenResty required)
# =============================================================================

user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log notice;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Logging format
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;

    # Performance optimizations
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    server_tokens off;

    # SSL Configuration
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;

    # OCSP Stapling
    ssl_stapling on;
    ssl_stapling_verify on;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types text/plain text/css text/xml text/javascript application/javascript application/xml+rss application/json;

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=auth:10m rate=5r/m;
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;

    # Include additional configurations
    include /etc/nginx/conf.d/*.conf;

    # =============================================================================
    # HTTP TO HTTPS REDIRECT
    # =============================================================================
    server {
        listen 80;
        server_name _;
        
        # Let's Encrypt challenge
        location /.well-known/acme-challenge/ {
            root /var/www/certbot;
        }
        
        # Redirect all HTTP to HTTPS
        location / {
            return 301 https://$host$request_uri;
        }
    }

    # =============================================================================
    # MAIN HTTPS SERVER
    # =============================================================================
    server {
        listen 443 ssl http2;
        server_name _;

        # SSL Configuration
        ssl_certificate /etc/nginx/ssl/cert.pem;
        ssl_certificate_key /etc/nginx/ssl/key.pem;

        # Security headers
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        add_header X-Frame-Options DENY always;
        add_header X-Content-Type-Options nosniff always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;

        # Root directory for static files
        root /var/www/html;
        index index.html;

        # =============================================================================
        # AUTHELIA AUTHENTICATION
        # =============================================================================
        
        # Authelia authentication endpoint
        location /auth {
            internal;
            proxy_pass http://authelia:9091/api/verify;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;
            proxy_set_header X-Original-URL https://$host$request_uri;
            proxy_pass_request_body off;
            proxy_set_header Content-Length "";
        }

        # Authelia login interface
        location ^~ /auth/ {
            proxy_pass http://authelia:9091;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;
            proxy_set_header X-Original-URL https://$host$request_uri;
        }

        # =============================================================================
        # TOKEN-BASED ACCESS (BYPASS AUTH)
        # =============================================================================
        
        # Internal token validation endpoint
        location /internal/validate-token {
            internal;
            proxy_pass http://auth-service:8000/validate-token;
            proxy_pass_request_body off;
            proxy_set_header Content-Length "";
            proxy_set_header X-Original-URI $request_uri;
            proxy_set_header X-Original-Args $query_string;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;
        }

        # Token-protected DICOM-Web endpoints
        location ~ ^/dicom-web.*[\?&]token=[^&\s]+ {
            auth_request /internal/validate-token;
            proxy_pass http://orthanc:8042;
            include /etc/nginx/conf.d/proxy_headers.conf;
        }

        # Token-protected WADO endpoints  
        location ~ ^/wado.*[\?&]token=[^&\s]+ {
            auth_request /internal/validate-token;
            proxy_pass http://orthanc:8042;
            include /etc/nginx/conf.d/proxy_headers.conf;
        }

        # Token-protected OHIF endpoints
        location ~ ^/ohif.*[\?&]token=[^&\s]+ {
            auth_request /internal/validate-token;
            proxy_pass http://ohif:3000;
            include /etc/nginx/conf.d/proxy_headers.conf;
        }

        # =============================================================================
        # AUTHENTICATED ENDPOINTS
        # =============================================================================
        
        # Protected routes requiring authentication
        location / {
            # Check authentication with Authelia
            auth_request /auth;
            
            # Pass user information from Authelia
            auth_request_set $user $upstream_http_remote_user;
            auth_request_set $groups $upstream_http_remote_groups;
            auth_request_set $name $upstream_http_remote_name;
            auth_request_set $email $upstream_http_remote_email;
            
            # Set headers for downstream services
            proxy_set_header Remote-User $user;
            proxy_set_header Remote-Groups $groups;
            proxy_set_header Remote-Name $name;
            proxy_set_header Remote-Email $email;
            
            # Default to OHIF viewer
            try_files $uri $uri/ @ohif;
        }

        # OHIF Viewer
        location @ohif {
            proxy_pass http://ohif:3000;
            include /etc/nginx/conf.d/proxy_headers.conf;
        }

        location /ohif/ {
            auth_request /auth;
            proxy_pass http://ohif:3000/;
            include /etc/nginx/conf.d/proxy_headers.conf;
        }

        # Orthanc PACS
        location /orthanc/ {
            auth_request /auth;
            proxy_pass http://orthanc:8042/;
            include /etc/nginx/conf.d/proxy_headers.conf;
        }

        # Orthanc DICOM-Web API
        location /dicom-web/ {
            auth_request /auth;
            proxy_pass http://orthanc:8042/dicom-web/;
            include /etc/nginx/conf.d/proxy_headers.conf;
        }

        # Orthanc WADO
        location /wado {
            auth_request /auth;
            proxy_pass http://orthanc:8042/wado;
            include /etc/nginx/conf.d/proxy_headers.conf;
        }

        # Auth service API
        location /api/auth/ {
            auth_request /auth;
            proxy_pass http://auth-service:8000/;
            include /etc/nginx/conf.d/proxy_headers.conf;
        }

        # =============================================================================
        # ERROR HANDLING
        # =============================================================================
        
        # Authentication error handling
        error_page 401 = @error401;
        location @error401 {
            return 302 /auth/?rd=https://$host$request_uri;
        }

        # Generic error pages
        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            root /usr/share/nginx/html;
        }
    }
}