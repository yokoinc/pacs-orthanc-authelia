user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;
    
    # Debug log to see auth headers
    log_format debug '$remote_addr - $remote_user [$time_local] "$request" '
                     '$status $body_bytes_sent "$http_referer" '
                     '"$http_user_agent" "groups: $groups" "auth_token: $auth_token"';
    
    # Désactiver temporairement le debug log pour éviter les warnings
    # access_log /var/log/nginx/debug.log debug;

    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 2g;

    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types text/plain text/css text/xml text/javascript application/json application/javascript application/xml+rss application/rss+xml application/atom+xml image/svg+xml;

    upstream orthanc {
        server orthanc:8042;
    }

    # Upstream pour OHIF avec le chemin de base
    upstream ohif_viewer {
        server orthanc-ohif:8080;
    }

    server {
        listen 80;
        server_name localhost;
        
        # To avoid "414 Request-URI Too Large" when opening 15(!) studies in OHIF
        large_client_header_buffers 8 16k;

        # Global security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        # Enforce HTTPS for all sub‑domains (2 years + preload)
        add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;
        add_header Referrer-Policy "same-origin" always;
        add_header Permissions-Policy "geolocation=(), microphone=()" always;

        # Assets statiques d'Authelia - utiliser ^~ pour avoir la priorité sur les regex
        location ^~ /static/ {
            proxy_pass http://authelia:9091/static/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;
            
            # Supprimer les headers CSP restrictifs pour les assets
            proxy_hide_header Content-Security-Policy;
            proxy_hide_header X-Frame-Options;
            proxy_hide_header X-Content-Type-Options;
            proxy_hide_header X-Dns-Prefetch-Control;
            proxy_hide_header Permissions-Policy;
            proxy_hide_header Referrer-Policy;
            
            # Cache pour les assets statiques
            expires 1h;
            add_header Cache-Control "public, immutable";
        }
        
        etag off;

        location = / {
            return 302 /ui/app/;
        }
        
        # OHIF static config files (public, no auth) – strip /ohif/ prefix
        location ~ ^/ohif/(app-config\.js|ohifapp-config\.js|manifest\.json)$ {
            rewrite ^/ohif/(.*)$ /$1 break;
            proxy_pass http://ohif_viewer;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;
        }

        # All remaining OHIF static assets (JS/CSS/images) – strip /ohif/ prefix
        location /ohif/static/ {
            rewrite ^/ohif/(.*)$ /$1 break;
            proxy_pass http://ohif_viewer;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;
        }

        # Tous les autres assets OHIF (pas dans /static/) - strip /ohif/ prefix
        location ~* ^/ohif/[^/]*\.(js|css|png|jpe?g|gif|svg|ico|webp|json|gz|wasm|woff|woff2|ttf|eot|map)$ {
            rewrite ^/ohif/(.*)$ /$1 break;
            proxy_pass http://ohif_viewer;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;
        }

        # Assets statiques généraux - APRÈS toutes les routes OHIF spécifiques
        location ~* \.(js|css|png|jpe?g|gif|svg|ico|webp|json|gz|wasm|woff|woff2|ttf|eot|map)$ {
            # Exclure seulement /static/ (Authelia)
            if ($uri ~ ^/static/) {
                return 404;
            }
            
            proxy_pass http://orthanc;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;
            
            # Cache pour les assets
            expires 1y;
            add_header Cache-Control "public, immutable";
        }

        # UI spécifique - pour les requêtes directes vers /ui/
        location /ui/ {
            # Authentification via Authelia
            auth_request /authelia/;
            
            # Récupérer les informations utilisateur d'Authelia
            auth_request_set $user $upstream_http_remote_user;
            auth_request_set $groups $upstream_http_remote_groups;
            
            # Redirection vers la page de login si non authentifié
            error_page 401 = @error401;
            
            # Proxy vers Orthanc
            proxy_pass http://orthanc;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;
            
            # Ajouter le token selon le groupe
            set $auth_token "";
            if ($groups ~ "admin") {
                set $auth_token "admin-token";
            }
            if ($groups ~ "doctor") {
                set $auth_token "doctor-token";
            }
            if ($groups ~ "external") {
                set $auth_token "external-token";
            }
            proxy_set_header api-key $auth_token;
            
            # Transmettre les informations d'authentification à Orthanc
            proxy_set_header Remote-User $user;
            proxy_set_header Remote-Groups $groups;
            
            proxy_request_buffering off;
            proxy_max_temp_file_size 0;
            proxy_buffering off;
        }
        
        # Stone Web‑viewer
        location /stone-webviewer/ {
            # Authentification via Authelia
            auth_request /authelia/;

            # Récupérer les informations utilisateur d'Authelia
            auth_request_set $user $upstream_http_remote_user;
            auth_request_set $groups $upstream_http_remote_groups;

            # Redirection vers la page de login si non authentifié
            error_page 401 = @error401;

            # Proxy vers Orthanc (le plugin Stone est servi directement par Orthanc)
            proxy_pass http://orthanc;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;

            # Ajouter le token selon le groupe
            set $auth_token "";
            if ($groups ~ "admin")   { set $auth_token "admin-token"; }
            if ($groups ~ "doctor")  { set $auth_token "doctor-token"; }
            if ($groups ~ "external"){ set $auth_token "external-token"; }
            proxy_set_header api-key $auth_token;

            # Transmettre les informations d'authentification à Orthanc
            proxy_set_header Remote-User $user;
            proxy_set_header Remote-Groups $groups;

            # Optimisations pour les ressources
            proxy_buffering off;
            proxy_request_buffering off;
            proxy_max_temp_file_size 0;
        }

        # Kitware VolView Web‑viewer
        location /volview/ {
            # Authentification via Authelia
            auth_request /authelia/;

            # Récupérer les informations utilisateur d'Authelia
            auth_request_set $user $upstream_http_remote_user;
            auth_request_set $groups $upstream_http_remote_groups;

            # Redirection vers la page de login si non authentifié
            error_page 401 = @error401;

            # Proxy vers Orthanc (le plugin VolView est servi directement par Orthanc)
            proxy_pass http://orthanc;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;

            # Ajouter le token selon le groupe
            set $auth_token "";
            if ($groups ~ "admin")   { set $auth_token "admin-token"; }
            if ($groups ~ "doctor")  { set $auth_token "doctor-token"; }
            if ($groups ~ "external"){ set $auth_token "external-token"; }
            proxy_set_header api-key $auth_token;

            # Transmettre les informations d'authentification à Orthanc
            proxy_set_header Remote-User $user;
            proxy_set_header Remote-Groups $groups;

            # Optimisations pour les ressources VolView
            proxy_buffering off;
            proxy_request_buffering off;
            proxy_max_temp_file_size 0;
        }

        # OHIF Viewer - Strip /ohif/ prefix
        location /ohif/ {
            # Authentification via Authelia
            auth_request /authelia/;
            
            # Récupérer les informations utilisateur d'Authelia
            auth_request_set $user $upstream_http_remote_user;
            auth_request_set $groups $upstream_http_remote_groups;
            
            # Redirection vers la page de login si non authentifié
            error_page 401 = @error401;
            
            # Proxy vers OHIF (garde le chemin complet)
            proxy_pass http://ohif_viewer;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;
            
            # Headers requis pour OHIF (SharedArrayBuffer)
            add_header Cross-Origin-Opener-Policy same-origin always;
            add_header Cross-Origin-Embedder-Policy require-corp always;
            add_header Cross-Origin-Resource-Policy cross-origin always;
            
            # Optimisations pour les images médicales
            proxy_buffering off;
            proxy_request_buffering off;
            proxy_max_temp_file_size 0;
        }
        
        # WADO et DICOM-Web pour OHIF (accès restreint aux utilisateurs authentifiés)
        location /wado {
            # Authentification via Authelia
            auth_request /authelia/;
            
            # Récupérer les informations utilisateur d'Authelia
            auth_request_set $user $upstream_http_remote_user;
            auth_request_set $groups $upstream_http_remote_groups;
            
            # Redirection vers la page de login si non authentifié
            error_page 401 = @error401;
            
            proxy_pass http://orthanc;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;
            
            # Ajouter le token selon le groupe
            set $auth_token "";
            if ($groups ~ "admin") {
                set $auth_token "admin-token";
            }
            if ($groups ~ "doctor") {
                set $auth_token "doctor-token";
            }
            if ($groups ~ "external") {
                set $auth_token "external-token";
            }
            proxy_set_header api-key $auth_token;
            
            # Transmettre les informations d'authentification à Orthanc
            proxy_set_header Remote-User $user;
            proxy_set_header Remote-Groups $groups;
            
            proxy_request_buffering off;
            proxy_max_temp_file_size 0;
            proxy_buffering off;
        }

        location /dicom-web {
            # Authentification via Authelia
            auth_request /authelia/;
            
            # Récupérer les informations utilisateur d'Authelia
            auth_request_set $user $upstream_http_remote_user;
            auth_request_set $groups $upstream_http_remote_groups;
            
            # Redirection vers la page de login si non authentifié
            error_page 401 = @error401;
            
            proxy_pass http://orthanc;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;
            
            # Ajouter le token selon le groupe
            set $auth_token "";
            if ($groups ~ "admin") {
                set $auth_token "admin-token";
            }
            if ($groups ~ "doctor") {
                set $auth_token "doctor-token";
            }
            if ($groups ~ "external") {
                set $auth_token "external-token";
            }
            proxy_set_header api-key $auth_token;
            
            # Transmettre les informations d'authentification à Orthanc
            proxy_set_header Remote-User $user;
            proxy_set_header Remote-Groups $groups;
            
            proxy_request_buffering off;
            proxy_max_temp_file_size 0;
            proxy_buffering off;
        }

        # API Orthanc - Pour OHIF et autres (sans wado/dicom-web qui sont traités au-dessus)
        location ~ ^/(instances|patients|series|studies|tools|system|statistics|modalities|peers|plugins|jobs|changes|exports|preview|shares|shared|publish)(?:/|$) {
            # Authentification via Authelia
            auth_request /authelia/;
            
            # Récupérer les informations utilisateur d'Authelia
            auth_request_set $user $upstream_http_remote_user;
            auth_request_set $groups $upstream_http_remote_groups;
            
            # Redirection vers la page de login si non authentifié
            error_page 401 = @error401;
            
            # Proxy vers Orthanc API
            proxy_pass http://orthanc;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;
            
            # Ajouter le token selon le groupe
            set $auth_token "";
            if ($groups ~ "admin") {
                set $auth_token "admin-token";
            }
            if ($groups ~ "doctor") {
                set $auth_token "doctor-token";
            }
            if ($groups ~ "external") {
                set $auth_token "external-token";
            }
            proxy_set_header api-key $auth_token;
            
            # Transmettre les informations d'authentification à Orthanc
            proxy_set_header Remote-User $user;
            proxy_set_header Remote-Groups $groups;
            
            # CORS pour l'API
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'Accept,Authorization,Cache-Control,Content-Type,DNT,If-Modified-Since,Keep-Alive,Origin,User-Agent,X-Requested-With';
        }
        
        # Redirect bare /auth to /auth/ so that Authelia's relative paths resolve correctly
        location = /auth {
            return 302 /auth/;
        }

        # All Authelia UI/API under /auth/
        location /auth/ {
            proxy_pass http://authelia:9091/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;
            proxy_set_header X-Forwarded-Uri $request_uri;

            # Strip Authelia's CSP headers (UI expects none)
            proxy_hide_header Content-Security-Policy;
            proxy_hide_header X-Frame-Options;
            proxy_hide_header X-Content-Type-Options;
        }

        # Authelia API (used by the SPA for /api/state, /api/…)
        location /api/ {
            proxy_pass http://authelia:9091/api/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;
            proxy_set_header Cookie $http_cookie;
        }

        # Manifest utilisé par l'UI Authelia
        location = /manifest.json {
            proxy_pass http://authelia:9091/manifest.json;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;
        }


        # Authelia i18n JSON files
        location /locales/ {
            # Authelia keeps i18n files under /static/locales/
            rewrite  ^/locales/(.*)$  /static/locales/$1  break;
            proxy_pass http://authelia:9091;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;
        }

        # Authelia auth endpoint
        location /authelia/ {
            internal;
            proxy_pass http://authelia:9091/api/verify;
            proxy_pass_request_body off;
            proxy_set_header Content-Length "";
            proxy_set_header X-Original-URL https://$host$request_uri;
            proxy_set_header X-Original-Method $request_method;
            proxy_set_header X-Forwarded-Proto https;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Cookie $http_cookie;
        }



        # Favicon et manifest
        location ~ ^/(favicon\.ico|manifest\.json)$ {
            proxy_pass http://authelia:9091$request_uri;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;
        }

        # Service auth (pour Orthanc)
        location /auth-service/ {
            proxy_pass http://auth-service:8000/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;
            proxy_set_header X-Auth-User $user;
            proxy_set_header X-Auth-Groups $groups;
        }

        location /orthanc/ {
            # Authentification via Authelia
            auth_request /authelia/;
            
            # Récupérer les informations utilisateur d'Authelia
            auth_request_set $user $upstream_http_remote_user;
            auth_request_set $groups $upstream_http_remote_groups;
            
            # Redirection vers la page de login si non authentifié
            error_page 401 = @error401;
            
            rewrite /orthanc/(.*) /$1 break;
            proxy_pass http://orthanc;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;
            
            # Ajouter le token selon le groupe
            set $auth_token "";
            if ($groups ~ "admin") {
                set $auth_token "admin-token";
            }
            if ($groups ~ "doctor") {
                set $auth_token "doctor-token";
            }
            if ($groups ~ "external") {
                set $auth_token "external-token";
            }
            proxy_set_header api-key $auth_token;
            
            # Transmettre les informations d'authentification à Orthanc
            proxy_set_header Remote-User $user;
            proxy_set_header Remote-Groups $groups;
            
            proxy_request_buffering off;
            proxy_max_temp_file_size 0;
            proxy_buffering off;
            
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'Accept,Authorization,Cache-Control,Content-Type,DNT,If-Modified-Since,Keep-Alive,Origin,User-Agent,X-Requested-With';
        }
        
        # Gestion de l'erreur 401 (non authentifié)
        location @error401 {
            return 302 /auth/?rd=https://$host$request_uri;
        }
    }
}